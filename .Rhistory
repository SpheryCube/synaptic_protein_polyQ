#                categorySize="pvalue",
#                foldChange=sig_df$ENTREZID,
#                node_label = FALSE,
#                colorEdge = TRUE)
print(p3)
# print(p4)
}
category_to_proteins = read.csv(text="GO_id,GO_desc,p.adjust,avg_peptide_length, number_proteins")
# Iterate over each enriched category, seeing if the length of the proteins in that category are correlated
# with the p-value of that category
enrich_results <- go_enrich_output@result %>% filter(p.adjust < 0.05) # Should we use a lower threshold?
if (nrow(enrich_results) > 0) { # Make sure there is actually stuff to iterate over.
for (i in 1:nrow(enrich_results)) {
row <- enrich_results[i,]
cat_gene_syms <- strsplit(row$geneID, split = '/' ) # Gene symbols of genes in category.
# Get the peptide ids of all the genes that were in this enriched category.
peptide_ids <- with(universe_df[universe_df$SYMBOL %in% cat_gene_syms[[1]],], get(fromType))
# Now get their HMM annotations and other data.
df <- proteins[proteins$ensembl_peptide_id %in% peptide_ids,]
# mean(df$peptide_length())
mean <- mean(unlist(lapply(as.character(df$peptide_seq), function(x){length(unlist(strsplit(x, "")))})))
number_proteins <- length(peptide_ids)
category_to_proteins[i,] <- list(row$ID, row$Description, row$p.adjust, mean, number_proteins)
}
# Make Avg length of peptide in category vs adjusted p-value of categories.
# This is a control to make sure that categories with longer peptides aren't
# more significant just based on the idea.
# Are synaptic categories below the line? Play with residuals to check.
# Check if the slopes are significantly different? <- Do this
# Check if the sum of the residuals is significantly different?
# What do I do?
# hist(category_to_proteins$number_proteins)
# Make sure category has at least 20 proteins.
df <- category_to_proteins %>% filter(category_to_proteins$number_proteins > 20)
df$synaptic_cat = df$GO_id %in% synapse_cats # True or False, depending on whether or not the category is a synaptic category
# Make two linear regression.
x = df$avg_peptide_length
y = df$p.adjust
fit <- lm(y ~ x)
# df$synapse <- ifelse(df$GO_id %in% synapse_cats, TRUE, FALSE)
p <- ggplot(df, aes(x = avg_peptide_length, y = p.adjust)) +
geom_point(alpha = 0.5,  aes(size = number_proteins, color = synaptic_cat)) +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Avg Length of Peptides in Enriched Category VS p-value of Enriched Category \n",
"Adj.R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
"  p.val =",signif(summary(fit)$coef[2,4], 5))) +
xlab("Average Peptide Length of Category") +
ylab("Adjusted p-value of Category") +
scale_size_continuous(name = "Number of Proteins") +
scale_color_discrete(name = "Synaptic Category") +
theme_light() +
theme(plot.title = element_text(hjust = 0.5),
legend.title =) +
# geom_text(aes(label = GO_desc), color ='red', data = df[df$GO_id %in% synapse_cats,]) +
geom_text_repel(mapping = aes(label = GO_desc),
arrow = arrow(length = unit(0.03, "npc"), type = 'closed', ends ="first"),
color ='#00CCCC',
data = df[df$synaptic_cat == TRUE,])
print(p)
} # for (i in 1:nrow(enrich_results)) {
dev.off()
} # if (!is.null(go_enrich_output)) {
} # make_enrichment_plots_and_files()
enrichment_output_dir <- paste0(paste0(output_dir, "/GO_Enrichment_", go_ont))
dir.create(enrichment_output_dir)
file_name = paste0(paste0(output_dir, "/GO_Enrichment_", go_ont, "/GO_", go_ont, "_results"))
make_enrichment_plots_and_files(go_enrich_output_control, type = "control", file_dir_and_name = file_name)
file_name = paste0(paste0(output_dir, "/GO_Enrichment_", go_ont, "/GO_", go_ont, "_results_CONTROL"))
make_enrichment_plots_and_files(go_enrich_output_control, type = "control", file_dir_and_name = file_name)
file_name = paste0(paste0(output_dir, "/GO_Enrichment_", go_ont, "/GO_", go_ont, "_results"))
make_enrichment_plots_and_files(go_enrich_output_test, type = "test", file_name)
file_name = paste0(paste0(output_dir, "/GO_Enrichment_", go_ont, "/GO_", go_ont, "_results"))
make_enrichment_plots_and_files(go_enrich_output_test, type = "test", file_name)
enrichment_output_dir <- paste0(paste0(output_dir, "/GO_Enrichment_", go_ont))
dir.create(enrichment_output_dir)
file_name = paste0(paste0(output_dir, "/GO_Enrichment_", go_ont, "/GO_", go_ont, "_results_CONTROL"))
make_enrichment_plots_and_files(go_enrich_output_control, type = "control", file_dir_and_name = file_name)
file_name = paste0(paste0(output_dir, "/GO_Enrichment_", go_ont, "/GO_", go_ont, "_results"))
make_enrichment_plots_and_files(go_enrich_output_test, type = "test", file_name)
#########################################
# Helper function
#########################################
make_enrichment_plots_and_files <- function(go_enrich_output, type, file_dir_and_name) {
if (!is.null(go_enrich_output)) {
go_result <- go_enrich_output@result
write.csv(go_enrich_output, file = paste0(file_dir_and_name, ".csv"), row.names = FALSE)
pdf(paste0(file_dir_and_name, "_plots.pdf"), width = 8.5, height = 11)
par(mfrow = c(1, 1))
p1 <- barplot(go_enrich_output, showCategory=8)
p2 <- dotplot(go_enrich_output)
if (nrow(go_enrich_output) != 0) {
p3 <- emapplot(go_enrich_output)
# p4 <- cnetplot(go_enrich_output,
#                categorySize="pvalue",
#                foldChange=sig_df$ENTREZID,
#                node_label = FALSE,
#                colorEdge = TRUE)
print(p3)
# print(p4)
}
dev.off()
} # if (!is.null(go_enrich_output)) {
} # make_enrichment_plots_and_files()
enrichment_output_dir <- paste0(paste0(output_dir, "/GO_Enrichment_", go_ont))
dir.create(enrichment_output_dir)
file_name = paste0(paste0(output_dir, "/GO_Enrichment_", go_ont, "/GO_", go_ont, "_results_CONTROL"))
make_enrichment_plots_and_files(go_enrich_output_control, type = "control", file_dir_and_name = file_name)
file_name = paste0(paste0(output_dir, "/GO_Enrichment_", go_ont, "/GO_", go_ont, "_results"))
make_enrichment_plots_and_files(go_enrich_output_test, type = "test", file_name)
dev.off()
file_name = paste0(paste0(output_dir, "/GO_Enrichment_", go_ont, "/GO_", go_ont, "_results"))
make_enrichment_plots_and_files(go_enrich_output_test, type = "test", file_name)
#########################################
# Helper function
#########################################
make_enrichment_plots_and_files <- function(go_enrich_output, type, file_dir_and_name) {
if (!is.null(go_enrich_output)) {
go_result <- go_enrich_output@result
write.csv(go_enrich_output, file = paste0(file_dir_and_name, ".csv"), row.names = FALSE)
pdf(paste0(file_dir_and_name, "_plots.pdf"), width = 8.5, height = 11)
par(mfrow = c(1, 1))
p1 <- barplot(go_enrich_output, showCategory=8)
p2 <- dotplot(go_enrich_output)
print(p1)
print(p2)
if (nrow(go_enrich_output) != 0) {
p3 <- emapplot(go_enrich_output)
print(p3)
# p4 <- cnetplot(go_enrich_output,
#                categorySize="pvalue",
#                foldChange=sig_df$ENTREZID,
#                node_label = FALSE,
#                colorEdge = TRUE)
# print(p4)
}
dev.off()
} # if (!is.null(go_enrich_output)) {
} # make_enrichment_plots_and_files()
enrichment_output_dir <- paste0(paste0(output_dir, "/GO_Enrichment_", go_ont))
dir.create(enrichment_output_dir)
file_name = paste0(paste0(output_dir, "/GO_Enrichment_", go_ont, "/GO_", go_ont, "_results_CONTROL"))
make_enrichment_plots_and_files(go_enrich_output_control, type = "control", file_dir_and_name = file_name)
file_name = paste0(paste0(output_dir, "/GO_Enrichment_", go_ont, "/GO_", go_ont, "_results"))
make_enrichment_plots_and_files(go_enrich_output_test, type = "test", file_name)
rnd_substr <- function(x, length) {
if (nchar(x) < length) {return(x)}
else {
start = sample(1:(nchar(x)-length), 1, replace=T)
end = start + (length-1)
random_substring = substr(x, start, end)
return(random_substring)
}
} # rnd_substr <- function(x, length)
#########################################
# Plot type: Whole Protein Qfraction Histogram for all proteins
p <- ggplot(data = proteins, aes(x = proteins$AAfraction)) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("Whole Protein %", candidate_AA)) +
ylab("# Proteins") +
ggtitle(paste0("%", candidate_AA, " Whole Protein")) +
theme_light()
print(p)
rnd_substr <- function(x, length) {
if (nchar(x) < length) {return(x)}
else {
start = sample(1:(nchar(x)-length), 1, replace=T)
end = start + (length-1)
random_substring = substr(x, start, end)
return(random_substring)
}
} # rnd_substr <- function(x, length)
pdf(paste0(output_dir, "/prots_result_plots.pdf"))
#########################################
# Plot type: Whole Protein Qfraction Histogram for all proteins
p <- ggplot(data = proteins, aes(x = proteins$AAfraction)) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("Whole Protein %", candidate_AA)) +
ylab("# Proteins") +
ggtitle(paste0("%", candidate_AA, " Whole Protein")) +
theme_light()
print(p)
nrow(proteins)
length(proteins$AAfraction)
candidate_AA
#########################################
# Plot type: Whole Protein Qfraction Histogram for all proteins
p <- ggplot(data = proteins, aes(x = proteins[,c(paste0(candidate_AA, "fraction"))])) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("Whole Protein %", candidate_AA)) +
ylab("# Proteins") +
ggtitle(paste0("%", candidate_AA, " Whole Protein")) +
theme_light()
print(p)
proteins[,c(paste0(candidate_AA, "fraction"))]
proteins$AAComp
#########################################
# Plot type: Whole Protein Qfraction Histogram for all proteins
p <- ggplot(data = proteins, aes(x = proteins$AAComp)) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("Whole Protein %", candidate_AA)) +
ylab("# Proteins") +
ggtitle(paste0("%", candidate_AA, " Whole Protein")) +
theme_light()
print(p)
filtered_df <- proteins %>% filter(proteins$AAC> quantile(proteins$AAfraction, 0.95))
filtered_df <- filtered_df %>% arrange(desc(filtered_df$AAfraction))
write.csv(filtered_df, file = paste0(output_AA_dir, candidate_AA, "fraction_all_wholeProts_95sig.csv"))
paste0(output_AA_dir, candidate_AA)
write.csv(filtered_df, file = paste0(output_AA_dir, candidate_AA, "fraction_all_wholeProts_95sig.csv"))
paste0(output_AA_dir, candidate_AA)
write.csv(filtered_df, file = paste0(output_dir, "\fraction_all_wholeProts_95sig.csv"))
write.csv(filtered_df, file = paste0(output_dir, "\fraction_all_wholeProts_95sig.csv"))
output_dir
write.csv(filtered_df, file = paste0(output_dir, "fraction_all_wholeProts_95sig.csv"))
# Plot type: Whole Protein AAC Histogram split by HMMhasPolyAA
p <- ggplot(data = proteins, aes(x = AAfraction, fill = HMMhasPolyAA)) +
geom_histogram(alpha=0.5, position="identity") +
xlab(paste0("%", candidate_AA, " (Whole Protein Seqs)")) +
ylab("# Proteins") +
labs(fill = paste0("Contains \n poly", candidate_AA)) +
ggtitle(paste0("%", candidate_AA," Whole Proteins Histogram")) +
theme_light()
print(p)
# Plot type: Whole Protein AAC Histogram split by HMMhasPolyAA
p <- ggplot(data = proteins, aes(x = AAComp, fill = HMMhasPolyAA)) +
geom_histogram(alpha=0.5, position="identity") +
xlab(paste0("%", candidate_AA, " (Whole Protein Seqs)")) +
ylab("# Proteins") +
labs(fill = paste0("Contains \n poly", candidate_AA)) +
ggtitle(paste0("%", candidate_AA," Whole Proteins Histogram")) +
theme_light()
print(p)
p <- ggplot(data = proteins, aes(x = AAfraction, fill = HMMhasPolyAA)) +
geom_density(alpha = 0.5) +
xlab(paste0("%", candidate_AA, " (Whole Protein Seqs)")) +
ylab("Density") +
labs(fill = paste0("Contains \n poly", candidate_AA)) +
ggtitle(paste0("%", candidate_AA, " Whole Proteins Density Plot")) +
theme_light()
print(p)
p <- ggplot(data = proteins, aes(x = AAComp, fill = HMMhasPolyAA)) +
geom_density(alpha = 0.5) +
xlab(paste0("%", candidate_AA, " (Whole Protein Seqs)")) +
ylab("Density") +
labs(fill = paste0("Contains \n poly", candidate_AA)) +
ggtitle(paste0("%", candidate_AA, " Whole Proteins Density Plot")) +
theme_light()
print(p)
########################################################
# Plot type: 100000 50AA chunks, each randomly chosen from randomly chosen Protein seqs
df <- sample_n(proteins, 100000, replace = TRUE)
df$RandomSeqs <-unlist(lapply(as.character(df$peptide_seq), rnd_substr, 50))
nAAs = str_count(df$RandomSeqs, candidate_AA)
df$AAfractionRandomSeq <- nAAs/nchar(df$RandomSeqs)
p <- ggplot(data = df, aes(x = df$AAfractionRandomSeq)) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("%", candidate_AA, " (Random 50AA Seqs)")) +
ylab("# of Randomly Choosen Pepitides") +
ggtitle(paste0("%", candidate_AA, " for 100000 50AA Random Seqs Histogram")) +
theme_light()
print(p)
filtered_df <- df %>% filter(df$AAfractionRandomSeq > quantile(df$AAfractionRandomSeq, 0.95))
filtered_df <- filtered_df %>% arrange(desc(filtered_df$AAfractionRandomSeq))
write.csv(filtered_df, file = paste0(output_AA_dir, "AAfraction_randomAAs_95sig.csv"))
p <- ggplot(data = df, aes(x = df$AvgLengthsPolyAA)) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("Average Poly", candidate_AA, " Length")) +
ylab(paste0("# Proteins Containing poly", candidate_AA, " (by HMM)")) +
ggtitle(paste0("Average Poly", candidate_AA, " Length in Poly", candidate_AA, " Containing Proteins")) +
theme_light()
p <- ggplot(data = df, aes(x = df$AAComp)) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("%", candidate_AA, " (Random 50AA Seqs)")) +
ylab("# of Randomly Choosen Pepitides") +
ggtitle(paste0("%", candidate_AA, " for 100000 50AA Random Seqs Histogram")) +
theme_light()
print(p)
filtered_df <- df %>% filter(df$AAComp > quantile(df$AAComp, 0.95))
filtered_df <- filtered_df %>% arrange(desc(filtered_df$AAComp))
write.csv(filtered_df, file = paste0(output_AA_dir, "AAfraction_randomAAs_95sig.csv"))
write.csv(filtered_df, file = paste0(output_dir, "AAfraction_randomAAs_95sig.csv"))
p <- ggplot(data = df, aes(x = as.numeric(df$AvgPolyAARegionAAFractions))) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("Avg %", candidate_AA, " of poly", candidate_AA, " Regions")) +
ggtitle(paste0("Avg %", candidate_AA, " of poly", candidate_AA," Regions for poly", candidate_AA, " Containing Proteins")) +
ylab(paste0("# Proteins Containing poly", candidate_AA)) +
theme_light()
print(p)
df <- proteins %>% filter(HMMhasPolyAA == TRUE)
p <- ggplot(data = df, aes(x = df$MaxPolyAARegionAAFractions)) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("Max %", candidate_AA, " of poly", candidate_AA, " Regions")) +
ggtitle(paste0("Max %", candidate_AA, " of Poly", candidate_AA, " Regions for poly", candidate_AA, " Containing Proteins")) +
ylab(paste0("# Proteins Containing poly", candidate_AA)) +
theme_light()
print(p)
p <- ggplot(data = df, aes(x = df$AvgLengthsPolyAA)) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("Average Poly", candidate_AA, " Length")) +
ylab(paste0("# Proteins Containing poly", candidate_AA, " (by HMM)")) +
ggtitle(paste0("Average Poly", candidate_AA, " Length in Poly", candidate_AA, " Containing Proteins")) +
theme_light()
print(p)
p <- ggplot(data = df, aes(x = df$MaxLengthsPolyAA)) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("Max poly", candidate_AA, " Length")) +
ylab(paste0("# Proteins Containing poly", candidate_AA, " (by HMM)")) +
ggtitle(paste0("Max poly", candidate_AA, " in poly", candidate_AA, " Containing Proteins")) +
theme_light()
print(p)
p <- ggplot(data = df, aes(x = df$NumberPolyAA)) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("Number of poly", candidate_AA, " Regions")) +
ylab(paste0("# of ", candidate_AA, " Proteins")) +
ggtitle(paste0("Number of poly", candidate_AA, " regions in poly", candidate_AA, " Containing Proteins")) +
theme_light()
print(p)
dev.off()
pdf(paste0(output_dir, "/prots_result_plots.pdf"))
#########################################
# Plot type: Whole Protein Qfraction Histogram for all proteins
p <- ggplot(data = proteins, aes(x = proteins$AAComp)) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("Whole Protein %", candidate_AA)) +
ylab("# Proteins") +
ggtitle(paste0("%", candidate_AA, " Whole Protein")) +
theme_light()
print(p)
filtered_df <- proteins %>% filter(proteins$AAC> quantile(proteins$AAfraction, 0.95))
filtered_df <- filtered_df %>% arrange(desc(filtered_df$AAfraction))
write.csv(filtered_df, file = paste0(output_dir, "fraction_all_wholeProts_95sig.csv"))
# Plot type: Whole Protein AAC Histogram split by HMMhasPolyAA
p <- ggplot(data = proteins, aes(x = AAComp, fill = HMMhasPolyAA)) +
geom_histogram(alpha=0.5, position="identity") +
xlab(paste0("%", candidate_AA, " (Whole Protein Seqs)")) +
ylab("# Proteins") +
labs(fill = paste0("Contains \n poly", candidate_AA)) +
ggtitle(paste0("%", candidate_AA," Whole Proteins Histogram")) +
theme_light()
print(p)
p <- ggplot(data = proteins, aes(x = AAComp, fill = HMMhasPolyAA)) +
geom_density(alpha = 0.5) +
xlab(paste0("%", candidate_AA, " (Whole Protein Seqs)")) +
ylab("Density") +
labs(fill = paste0("Contains \n poly", candidate_AA)) +
ggtitle(paste0("%", candidate_AA, " Whole Proteins Density Plot")) +
theme_light()
print(p)
########################################################
# Plot type: 100000 50AA chunks, each randomly chosen from randomly chosen Protein seqs
df <- sample_n(proteins, 100000, replace = TRUE)
df$RandomSeqs <-unlist(lapply(as.character(df$peptide_seq), rnd_substr, 50))
nAAs = str_count(df$RandomSeqs, candidate_AA)
df$AAComp <- nAAs/nchar(df$RandomSeqs)
p <- ggplot(data = df, aes(x = df$AAComp)) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("%", candidate_AA, " (Random 50AA Seqs)")) +
ylab("# of Randomly Choosen Pepitides") +
ggtitle(paste0("%", candidate_AA, " for 100000 50AA Random Seqs Histogram")) +
theme_light()
print(p)
filtered_df <- df %>% filter(df$AAComp > quantile(df$AAComp, 0.95))
filtered_df <- filtered_df %>% arrange(desc(filtered_df$AAComp))
write.csv(filtered_df, file = paste0(output_dir, "AAfraction_randomAAs_95sig.csv"))
p <- ggplot(data = df, aes(x = as.numeric(df$AvgPolyAARegionAAFractions))) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("Avg %", candidate_AA, " of poly", candidate_AA, " Regions")) +
ggtitle(paste0("Avg %", candidate_AA, " of poly", candidate_AA," Regions for poly", candidate_AA, " Containing Proteins")) +
ylab(paste0("# Proteins Containing poly", candidate_AA)) +
theme_light()
print(p)
df <- proteins %>% filter(HMMhasPolyAA == TRUE)
p <- ggplot(data = df, aes(x = df$MaxPolyAARegionAAFractions)) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("Max %", candidate_AA, " of poly", candidate_AA, " Regions")) +
ggtitle(paste0("Max %", candidate_AA, " of Poly", candidate_AA, " Regions for poly", candidate_AA, " Containing Proteins")) +
ylab(paste0("# Proteins Containing poly", candidate_AA)) +
theme_light()
print(p)
p <- ggplot(data = df, aes(x = df$AvgLengthsPolyAA)) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("Average Poly", candidate_AA, " Length")) +
ylab(paste0("# Proteins Containing poly", candidate_AA, " (by HMM)")) +
ggtitle(paste0("Average Poly", candidate_AA, " Length in Poly", candidate_AA, " Containing Proteins")) +
theme_light()
print(p)
p <- ggplot(data = df, aes(x = df$MaxLengthsPolyAA)) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("Max poly", candidate_AA, " Length")) +
ylab(paste0("# Proteins Containing poly", candidate_AA, " (by HMM)")) +
ggtitle(paste0("Max poly", candidate_AA, " in poly", candidate_AA, " Containing Proteins")) +
theme_light()
print(p)
p <- ggplot(data = df, aes(x = df$NumberPolyAA)) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("Number of poly", candidate_AA, " Regions")) +
ylab(paste0("# of ", candidate_AA, " Proteins")) +
ggtitle(paste0("Number of poly", candidate_AA, " regions in poly", candidate_AA, " Containing Proteins")) +
theme_light()
print(p)
dev.off()
species_vec
candidate_AA_vec
# Summary Plots
for (model in c("adjusted")) {
for (species in species_vec) {
for (candidate_AA in candidate_AA_vec) {
output_dir <- paste0(output_base_dir, model, "/", species, "/", candidate_AA, "/")
dir.create(output_dir, recursive = TRUE)
# Plotting helper function
# Number of randomly chosen 50 amino acid peptide chunks
rnd_substr <- function(x, length) {
if (nchar(x) < length) {return(x)}
else {
start = sample(1:(nchar(x)-length), 1, replace=T)
end = start + (length-1)
random_substring = substr(x, start, end)
return(random_substring)
}
} # rnd_substr <- function(x, length)
#########################################
pdf(paste0(output_dir, "/sequence_summary_plots.pdf"))
#########################################
# Plot type: Whole Protein Qfraction Histogram for all proteins
p <- ggplot(data = proteins, aes(x = proteins$AAComp)) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("Whole Protein %", candidate_AA)) +
ylab("# Proteins") +
ggtitle(paste0("%", candidate_AA, " Whole Protein")) +
theme_light()
print(p)
filtered_df <- proteins %>% filter(proteins$AAC> quantile(proteins$AAfraction, 0.95))
filtered_df <- filtered_df %>% arrange(desc(filtered_df$AAfraction))
write.csv(filtered_df, file = paste0(output_dir, "fraction_all_wholeProts_95sig.csv"))
# Plot type: Whole Protein AAC Histogram split by HMMhasPolyAA
p <- ggplot(data = proteins, aes(x = AAComp, fill = HMMhasPolyAA)) +
geom_histogram(alpha=0.5, position="identity") +
xlab(paste0("%", candidate_AA, " (Whole Protein Seqs)")) +
ylab("# Proteins") +
labs(fill = paste0("Contains \n poly", candidate_AA)) +
ggtitle(paste0("%", candidate_AA," Whole Proteins Histogram")) +
theme_light()
print(p)
p <- ggplot(data = proteins, aes(x = AAComp, fill = HMMhasPolyAA)) +
geom_density(alpha = 0.5) +
xlab(paste0("%", candidate_AA, " (Whole Protein Seqs)")) +
ylab("Density") +
labs(fill = paste0("Contains \n poly", candidate_AA)) +
ggtitle(paste0("%", candidate_AA, " Whole Proteins Density Plot")) +
theme_light()
print(p)
########################################################
# Plot type: 100000 50AA chunks, each randomly chosen from randomly chosen Protein seqs
df <- sample_n(proteins, 100000, replace = TRUE)
df$RandomSeqs <-unlist(lapply(as.character(df$peptide_seq), rnd_substr, 50))
nAAs = str_count(df$RandomSeqs, candidate_AA)
df$AAComp <- nAAs/nchar(df$RandomSeqs)
p <- ggplot(data = df, aes(x = df$AAComp)) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("%", candidate_AA, " (Random 50AA Seqs)")) +
ylab("# of Randomly Choosen Pepitides") +
ggtitle(paste0("%", candidate_AA, " for 100000 50AA Random Seqs Histogram")) +
theme_light()
print(p)
filtered_df <- df %>% filter(df$AAComp > quantile(df$AAComp, 0.95))
filtered_df <- filtered_df %>% arrange(desc(filtered_df$AAComp))
write.csv(filtered_df, file = paste0(output_dir, "AAfraction_randomAAs_95sig.csv"))
########################################################
# Plot type: Number of Proteins annotated by HMM to be "Poly AA" vs %AA
p <- ggplot(data = df, aes(x = as.numeric(df$AvgPolyAARegionAAFractions))) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("Avg %", candidate_AA, " of poly", candidate_AA, " Regions")) +
ggtitle(paste0("Avg %", candidate_AA, " of poly", candidate_AA," Regions for poly", candidate_AA, " Containing Proteins")) +
ylab(paste0("# Proteins Containing poly", candidate_AA)) +
theme_light()
print(p)
df <- proteins %>% filter(HMMhasPolyAA == TRUE)
p <- ggplot(data = df, aes(x = df$MaxPolyAARegionAAFractions)) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("Max %", candidate_AA, " of poly", candidate_AA, " Regions")) +
ggtitle(paste0("Max %", candidate_AA, " of Poly", candidate_AA, " Regions for poly", candidate_AA, " Containing Proteins")) +
ylab(paste0("# Proteins Containing poly", candidate_AA)) +
theme_light()
print(p)
##############
# Plot type 4: Number of Proteins annotated by HMM to be Poly Q vs Length of Region
p <- ggplot(data = df, aes(x = df$AvgLengthsPolyAA)) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("Average Poly", candidate_AA, " Length")) +
ylab(paste0("# Proteins Containing poly", candidate_AA, " (by HMM)")) +
ggtitle(paste0("Average Poly", candidate_AA, " Length in Poly", candidate_AA, " Containing Proteins")) +
theme_light()
print(p)
p <- ggplot(data = df, aes(x = df$MaxLengthsPolyAA)) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("Max poly", candidate_AA, " Length")) +
ylab(paste0("# Proteins Containing poly", candidate_AA, " (by HMM)")) +
ggtitle(paste0("Max poly", candidate_AA, " in poly", candidate_AA, " Containing Proteins")) +
theme_light()
print(p)
p <- ggplot(data = df, aes(x = df$NumberPolyAA)) +
geom_histogram(show.legend = FALSE, aes(fill=..count..)) +
xlab(paste0("Number of poly", candidate_AA, " Regions")) +
ylab(paste0("# of ", candidate_AA, " Proteins")) +
ggtitle(paste0("Number of poly", candidate_AA, " regions in poly", candidate_AA, " Containing Proteins")) +
theme_light()
print(p)
dev.off()
} # for (model in c("adjusted", "trained")) {
} # for (species in species_vec)
} # for (candidate_AA in candidate_AA_vec) {
